/*
*  작성일 : 2025-04-21
*  작성자 : 김동훈
*  주제   : 객체지향 프로그래밍(OOP)의 특징, (SOLID)원칙
*/

/*
*  절차지향 프로그래밍 vs 객체지향 프로그래밍
* 
*  절차 : 함수로 프로그래밍을 진행하겠다.
*  장점 : 코드가 매우 빠르다. 구현도 용이하다.
*  단점 : 확장성에 취약하다. 규모가 거대해지면 프로그래밍이 어려워진다.

   객체 : 객체 데이터가 행동을 하도록 프로그래밍
   장점 : 코드의 확장성이 유연하다. 
   단점 : 코드의 구현속도가 느린다. 설계를 해야한다.
*/

/*
*  OOP의 특징. 캡슐화, 추상화, 상속, 다형성
*/

/*
*  객체를 다른 객체로 표현하기.
* 
*  사각형(점)
* 
*  플레이어(HP, Stat)
*  적군(HP, Stat)
* 
*  기능1. 전투를 할 때 공통적인 기능을 조사.
*  기능2. 객체로 표현하기
*/

/* 
*  도전과제1. 은행계좌 객체  -  계좌, 입금. 출금
*  도전과제2. 계산기 만들기  -  숫자, 기호  계산 함수 실행
*  도전과제3. (학생, 몬스터, 도서) 관리 프로그램 -  게임 도감( 데이터 찾기, 삭제, 추가)
*/

#include "OOP.h"
#include "Hp.h"
#include "Player.h"
#include "enemy.h"

int main()
{
	Example1();

	Player player;
	Enemy enemy;

	player.AttackedBy(100);
	player.Recovery(50);
	enemy.AttackedBy(100);
	enemy.Recovery(50);

}